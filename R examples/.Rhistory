upper = beta_ci[2, ]
)
library(ggplot2)
ggplot(df, aes(x = param, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
coord_flip() +
labs(title = "Posterior Estimates for Beta", y = "Effect Size", x = "") +
theme_minimal()
#heatmap
# Your original year and serotype info
year_seq <- sort(unique(jdat$year_id))  # e.g., 2000:2006
sero_seq <- 1:jdat$n_sero
mean_year <- (length(year_seq) + 1) / 2
# Create a dataframe of all serotype-year combinations
pred_grid <- expand.grid(
sero = sero_seq,
year = year_seq
)
# Predict expected log incidence
pred_grid$log_lambda <- mu_means[pred_grid$sero] +
beta_means[pred_grid$sero] * (pred_grid$year - mean_year)
pred_grid
colnames(pres_grid)
colnames(pred_grid)
colnames(d1.adults)
colnames(serotype_year_counts)
as.matrix(samp)[, grep("beta", colnames(as.matrix(samp)))]
as.matrix(samp)[, grep("mean", colnames(as.matrix(samp)))]
as.matrix(samp)[, grep("betasda", colnames(as.matrix(samp)))]
as.matrix(samp)[, grep("means", colnames(as.matrix(samp)))]
as.matrix(samp)[, grep("mu", colnames(as.matrix(samp)))]
as.matrix(samp)[, grep("beta", colnames(as.matrix(samp)))]
as.matrix(samp)[, grep("mu", colnames(as.matrix(samp)))]
mu_samples <- as.matrix(samp)[, grep("mu", colnames(as.matrix(samp)))]
mu_means <- apply(mu_samples, 2, mean)
mu_ci <- apply(mu_samples, 2, quantile, probs = c(0.025, 0.975))
# Predict expected log incidence
pred_grid$log_lambda <- mu_means[pred_grid$sero] +
beta_means[pred_grid$sero] * (pred_grid$year - mean_year)
# Back-transform to incidence
pred_grid$lambda <- exp(pred_grid$log_lambda)
ggplot(pred_grid, aes(x = year, y = factor(sero), fill = lambda)) +
geom_tile(color = "white") +
scale_fill_viridis_c(name = "Expected\nCases", option = "C") +
labs(x = "Year", y = "Serotype", title = "Expected Cases by Year and Serotype") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8))
library(ggplot2)
ggplot(serotype_year_counts, aes(x = epiyr, y = SeroType, fill = cases)) +
geom_tile(color = "white") +
scale_fill_viridis_c(option = "C", name = "Cases") +
labs(title = "IPD Cases by Serotype and Year",
x = "Year",
y = "Serotype") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#model version
mean_year <- (max(serotype_year_counts$year_id) + 1) / 2
# Create a data frame with expected log lambda for each serotype-year
serotype_year_counts$expected_log_lambda <- mu_means[serotype_year_counts$sero_id] +
beta_means[serotype_year_counts$sero_id] * (serotype_year_counts$year_id - mean_year)
# Convert to expected cases (lambda)
serotype_year_counts$expected_cases <- exp(serotype_year_counts$expected_log_lambda)
#plot
ggplot(serotype_year_counts, aes(x = epiyr)) +
geom_point(aes(y = cases), color = "blue", alpha = 0.5) +
geom_line(aes(y = expected_cases, group = SeroType), color = "red") +
facet_wrap(~ SeroType, scales = "free_y") +
labs(y = "Cases", x = "Year", title = "Observed (points) vs Expected (lines) Cases by Serotype") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library("readr")      # For reading in the data
library("tibble")     # For handling tidyverse tibble data classes
library("tidyr")      # For tidying data
library("dplyr")      # For data manipulation
library("stringr")    # For string manipulation
library("MASS")       # Functions/datasets for statistical analysis
library("lubridate")  # For date manipulation
library("ggplot2")    # For creating static visualizations
library("scales")     # For formatting plots axis
library("gridExtra")  # Creates multiple grid-based plots
})
# Function to select "Not In"
'%!in%' <- function(x,y)!('%in%'(x,y))
rm(ls())
rm(list = ls())
suppressPackageStartupMessages({
library("readr")      # For reading in the data
library("tibble")     # For handling tidyverse tibble data classes
library("tidyr")      # For tidying data
library("dplyr")      # For data manipulation
library("stringr")    # For string manipulation
library("MASS")       # Functions/datasets for statistical analysis
library("lubridate")  # For date manipulation
library("ggplot2")    # For creating static visualizations
library("scales")     # For formatting plots axis
library("gridExtra")  # Creates multiple grid-based plots
})
# Function to select "Not In"
'%!in%' <- function(x,y)!('%in%'(x,y))
df_cases <- read.csv('data\\peru\\peru.csv')
df_cases <- read.csv('data\\peru.csv')
df_gps <- read.csv('data\\peru\\peru_gps.csv')
df_gps <- read.csv('data\\peru_gps.csv')
colnames(df_cases) <- c('region', 'province', 'district', 'year', 'week', 'department_code', 'geo_code', 'under_5_noncase', 'under_5_case', 'over_60_case', 'under_5_hospitalized', 'over_60_hospitalized', 'under_5_death', 'over_60_death')
glimpse(df_cases)
glimpse(df_gps)
summary(df_cases)
pcv10.intro.date <- as.Date('2011-06-01')
pcv13.intro.date <- as.Date('2013-06-01')
df_cases_agg <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case + over_60_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (combined age groups) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
df_cases_agg$month <- as.factor(month(df_cases_agg$date))
mod1 <- glm.nb(total_cases ~ as.Date(date) + month, data = df_cases_agg)
pred1 <- predict(mod1, type = 'response', se.fit = TRUE)
df_cases_agg <- df_cases_agg %>% mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>% mutate(conf.low = pred - 1.96 * se.fit, conf.high = pred + 1.96 * se.fit)
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_point() + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8", size = 2) + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue')
df_cases_agg_over60 <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(over_60_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
ggplot(df_cases_agg_over60, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (> 60) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
df_cases_agg_under5 <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
ggplot(df_cases_agg_under5, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (> 60) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
ggplot(df_cases_agg_under5, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (< 5) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
suppressPackageStartupMessages({
library("readr")      # For reading in the data
library("tibble")     # For handling tidyverse tibble data classes
library("tidyr")      # For tidying data
library("dplyr")      # For data manipulation
library("stringr")    # For string manipulation
library("MASS")       # Functions/datasets for statistical analysis
library("lubridate")  # For date manipulation
library("ggplot2")    # For creating static visualizations
library("scales")     # For formatting plots axis
library("gridExtra")  # Creates multiple grid-based plots
})
# Function to select "Not In"
'%!in%' <- function(x,y)!('%in%'(x,y))
# Read in the cleaned data directly from the instructor's GitHub.
df <- read_csv("https://raw.githubusercontent.com/ysph-dsde/bdsy-phm/refs/heads/main/Data/ec_2to59m.csv")
# Read in the cleaned data directly from the instructor's GitHub.
df <- read_csv("https://raw.githubusercontent.com/ysph-dsde/bdsy-phm/refs/heads/main/Data/ec_2to59m.csv")
# Summarize aspects and dimentions of our dataset.
glimpse(df)
# Estimation when the vaccine was introduced in YYYY-MM-DD format.
vax.intro.date <- as.Date('2010-08-01')
# Date when vaccine efficacy evaluations started; at least
# 12 months following administration.
vax.eval.date <- as.Date('2011-08-01')
p1 <-
ggplot(df, aes(x = date, y = J12_J18_prim)) +
geom_line() +
labs(title = "Deaths Categorized by\nICD-10 Codes J12-18",
x = "Date", y = "Counts for <5 yo") +
# Have y-axis for the two plots be the same.
ylim(0, 250) +
# Reference line.
geom_vline(xintercept = vax.intro.date, col = 'red', lty = 2) +
theme_linedraw()
p2 <-
ggplot(df, aes(x = date, y = acm_noj_prim)) +
geom_line() +
labs(title = "Deaths Categorized by\nNon-J chapter ICD-10 Codes",
x = "Date", y = "Counts for <5 yo") +
# Have y-axis for the two plots be the same.
ylim(0, 250) +
# Reference line.
geom_vline(xintercept = vax.intro.date, col = 'red', lty = 2) +
theme_linedraw()
# Display the plots side-by-side.
grid.arrange(p1, p2, nrow = 1)
p2 <- ggplot(df_cases_agg_under5, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (< 5) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
less5 <- ggplot(df_cases_agg_under5, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (< 5) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
over60 <- ggplot(df_cases_agg_over60, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (> 60) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
grid.arrange(over60, less5, nrow = 1)
grid.arrange(over60, less5, nrow = 2)
grid.arrange(over60, less5, nrow = 2)
grid.arrange(over60, less5, nrow = 2)
df_cases
colnames(df_cases)
df_cases_agg <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case + over_60_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (combined age groups) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
df_cases_agg
df
df_cases
df_cases_agg$log.offsetunder5 <- log(df_cases$under_5_noncase)
mod1 <- glm.nb(total_cases ~ as.Date(date) + month + offset(log.offsetunder5), data = df_cases_agg)
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_point() + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8", size = 2) + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue')
df_cases_agg <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case + over_60_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (combined age groups) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
mod1 <- glm.nb(total_cases ~ as.Date(date) + month + offset(log.offsetunder5), data = df_cases_agg)
df_cases_agg$log.offsetunder5 <- log(df_cases$under_5_noncase)
df_cases
df
df_cases
df_cases_agg
df_cases <- df_cases %>% mutate(week_start = as.Date(paste(year, week, 1, sep = '-'), format = '%Y-%U-%u'))
df_cases
df_cases
df_cases <- df_cases %>%
mutate(month = floor_date(week_start, unit = "month"))
df_cases_monthly <- df_cases %>%
group_by(month) %>%
summarise(
under_5_deaths = sum(under_5_death, na.rm = TRUE),
under_5_noncases = sum(under_5_noncase, na.rm = TRUE), under_5_cases = sum(under_5_case, na.rm = TRUE), under_5_hospitalized = sum(under_5_hospitalized, na.rm = TRUE)
)
df_cases_monthly
# breaking up the data by month
df_cases_monthly <- df_cases %>%
group_by(month) %>%
summarise(
under_5_deaths = sum(under_5_death, na.rm = TRUE),
under_5_noncases = sum(under_5_noncase, na.rm = TRUE), under_5_cases = sum(under_5_case, na.rm = TRUE), under_5_hospitalized = sum(under_5_hospitalized, na.rm = TRUE), total_cases = sum(total_cases, na.rm = TRUE)
)
df_cases
# breaking up the data by month
df_cases_monthly <- df_cases %>%
group_by(month) %>%
summarise(
under_5_deaths = sum(under_5_death, na.rm = TRUE),
under_5_noncases = sum(under_5_noncase, na.rm = TRUE), under_5_cases = sum(under_5_case, na.rm = TRUE), under_5_hospitalized = sum(under_5_hospitalized, na.rm = TRUE)
)
df_cases_monthly
df_cases_monthly
df
df$date
df_cases_monthly
colnames(df_cases_monthly)
colnames(df_cases_monthly)[1] <- 'date'
df_cases_monthly$month <- as.factor(month(df_cases_monthly$date))
df_case_monthly
df_cases_monthly
df_cases_monthly$log.offset <- log(df_cases_monthly$under_5_noncases)
mod1 <- glm.nb(under_5_cases ~ date + month + offset(log.offset), data = df_cases_monthly)
mod1
pred1 <- predict(mod1, type = 'response', se.fit = TRUE)
# breaking up the data by month
monthly_cases <- df_cases %>%
group_by(month) %>%
summarise(
under_5_deaths = sum(under_5_death, na.rm = TRUE),
under_5_noncases = sum(under_5_noncase, na.rm = TRUE), under_5_cases = sum(under_5_case, na.rm = TRUE), under_5_hospitalized = sum(under_5_hospitalized, na.rm = TRUE)
)
colnames(monthly_cases)[1] <- 'date'
monthly_cases$month <- as.factor(month(df_cases_monthly$date))
monthly_cases$month <- as.factor(month(monthly_cases$date))
monthly_cases$log.offset <- log(monthly_cases$under_5_noncases)
mod1 <- glm.nb(under_5_cases ~ date + month + offset(log.offset), data = monthly_cases)
pred1 <- predict(mod1, type = 'response', se.fit = TRUE)
p1 <- ggplot(monthly_cases, aes(x = date, y = under_5_cases)) + geom_point() + theme_linedraw()
p1
monthly_casesv1 <- monthly_cases %>%
mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p1 <- ggplot(monthly_cases, aes(x = date, y = under_5_cases)) + geom_point() + theme_linedraw()
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = 'green')
monthly_casesv1 <- monthly_cases %>%
mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
pred1 <- predict(mod1, type = 'response', se.fit = TRUE)
pred1$se.fit
monthly_casesv1 <- monthly_cases %>%
mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
pred1
monthly_cases
pred1
pred1$se.fit
pred1 <- predict(mod1, se.fit = TRUE)
monthly_casesv1 <- monthly_cases %>%
mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
pred1 <- predict(mod1, type = 'link', se.fit = TRUE)
monthly_casesv1 <- monthly_cases %>%
mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
monthly_casesv1
monthly_case
monthly_cases
sum(is.na(monthly_cases$under_5_cases))
# breaking up the data by month
monthly_cases <- df_cases %>%
group_by(month) %>%
summarise(
under_5_deaths = sum(under_5_death, na.rm = TRUE),
under_5_noncases = sum(under_5_noncase, na.rm = TRUE), under_5_cases = sum(under_5_case, na.rm = TRUE), under_5_hospitalized = sum(under_5_hospitalized, na.rm = TRUE)
)
colnames(monthly_cases)[1] <- 'date'
monthly_cases$month <- as.factor(month(monthly_cases$date))
monthly_cases$log.offset <- log(monthly_cases$under_5_noncases)
mod1 <- glm.nb(under_5_cases ~ date + month + offset(log.offset), data = monthly_cases)
pred1 <- predict(mod1, type = 'link', se.fit = TRUE)
pred2
pred1
monthly_cases
sum(is.na(monthly_cases$log.offset))
sum(is.na(monthly_cases))
monthly_case
monthly_cases
sum(is.na(monthly_cases$date))
which(is.na(monthly_cases$date))
monthly_cases[-2]
monthly_cases[287:290]
motnhly_cases[1]
monthly_cases[1]
monthly_cases[289]
monthly_cases[287:289,]
monthly_cases$date[is.na(monthly_cases$date)] <- as.Date("2024-01-01")
monthly_cases$month[is.na(monthly_cases$month)] <- 1
monthly_cases[287:289,]
monthly_cases$month <- as.factor(month(monthly_cases$date))
monthly_cases$date[is.na(monthly_cases$date)] <- as.Date("2024-01-01")
monthly_cases$month[is.na(monthly_cases$month)] <- 1
monthly_cases$log.offset <- log(monthly_cases$under_5_noncases)
mod1 <- glm.nb(under_5_cases ~ date + month + offset(log.offset), data = monthly_cases)
pred1 <- predict(mod1, type = 'link', se.fit = TRUE)
pred1
monthly_casesv1 <- monthly_cases %>%
mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p1 <- ggplot(monthly_cases, aes(x = date, y = under_5_cases)) + geom_point() + theme_linedraw()
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = 'green')
p1
p1a
monthly_casesv1
colnames(monthly_casesv1)
monthly_casesv1$pred
pred1 <- predict(mod1, type = 'response', se.fit = TRUE)
monthly_casesv1 <- monthly_cases %>%
mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
pred
p1 <- ggplot(monthly_cases, aes(x = date, y = under_5_cases)) + geom_point() + theme_linedraw()
pred
pred1
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = 'green')
p1a
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a")
p1a
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_vline(pcv10.intro.date, col = 'red', lty = 2) + geom_vline(pcv13.intro.date, col = 'blue', lty = 2)
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
p1a
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_ribbon(data = monthly_casesv1, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'orange') + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
p1a
# For modeling, we need to use an ordered, discrete variable. Simply, we
# can use the rownames for this purpose.
df <- tibble::rownames_to_column(df, var = "index") %>%
mutate(index = as.numeric(index))
# Apply the negative binomial regression.
mod1 <- glm.nb(J12_J18_prim ~ index , data = df)
# Examine the fitting results.
summary(mod1)
# Make predictions with confidence intervals.
pred <- predict(mod1, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df.pred <- df %>%
mutate(se.fit = pred$se.fit, pred = pred$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit
conf.high = pred + 1.96 * se.fit
# Add the model predictions and 95% COI to the dataframe.
df.pred <- df %>%
mutate(se.fit = pred$se.fit, pred = pred$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Plot the newly created model fitting.
p1a <- p1 +
# Add the fitting line.
geom_line(data = df.pred, aes(x = date, y = pred),
color = "#e41a1c") +
# Add the confidence interval.
geom_ribbon(data = df.pred, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit")
p1a
# Plot the newly created model fitting.
p1a <- p1 +
# Add the fitting line.
geom_line(data = df.pred, aes(x = date, y = pred),
color = "#e41a1c") +
# Add the confidence interval.
geom_ribbon(data = df.pred, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit")
p1a
# Plot the newly created model fitting.
p1a <- p1 +
# Add the fitting line.
geom_line(data = df.pred, aes(x = date, y = pred),
color = "#e41a1c") +
# Add the confidence interval.
geom_ribbon(data = df.pred, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit")
p1a
pcv10.intro.date <- as.Date('2011-06-01')
pcv13.intro.date <- as.Date('2013-06-01')
df_cases_agg <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case + over_60_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
# breaking up the data by month
monthly_cases <- df_cases %>%
group_by(month) %>%
summarise(
under_5_deaths = sum(under_5_death, na.rm = TRUE),
under_5_noncases = sum(under_5_noncase, na.rm = TRUE), under_5_cases = sum(under_5_case, na.rm = TRUE), under_5_hospitalized = sum(under_5_hospitalized, na.rm = TRUE)
)
colnames(monthly_cases)[1] <- 'date'
monthly_cases$month <- as.factor(month(monthly_cases$date))
monthly_cases$date[is.na(monthly_cases$date)] <- as.Date("2024-01-01")
monthly_cases$month[is.na(monthly_cases$month)] <- 1
monthly_cases$log.offset <- log(monthly_cases$under_5_noncases)
mod1 <- glm.nb(under_5_cases ~ date + month + offset(log.offset), data = monthly_cases)
pred1 <- predict(mod1, type = 'response', se.fit = TRUE)
monthly_casesv1 <- monthly_cases %>%
mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p1 <- ggplot(monthly_cases, aes(x = date, y = under_5_cases)) + geom_point() + theme_linedraw()
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_ribbon(data = monthly_casesv1, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'orange') + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_ribbon(data = monthly_casesv1, aes(ymin = conf.low, ymax = conf.high), alpha = 0.05, fill = 'blue') + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
p1a
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_ribbon(data = monthly_casesv1, aes(ymin = conf.low, ymax = conf.high), alpha = 0.4, fill = 'blue') + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
p1a
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_ribbon(data = monthly_casesv1, aes(ymin = conf.low, ymax = conf.high), alpha = 0.4, fill = 'blue') + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'green', lty = 2)
p1a
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_ribbon(data = monthly_casesv1, aes(ymin = conf.low, ymax = conf.high), alpha = 0.4, fill = 'blue') + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'gray', lty = 2)
p1a
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_ribbon(data = monthly_casesv1, aes(ymin = conf.low, ymax = conf.high), alpha = 0.4, fill = 'blue') + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'black', lty = 2)
p1a
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_ribbon(data = monthly_casesv1, aes(ymin = conf.low, ymax = conf.high), alpha = 0.5, fill = 'black') + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
p1a
p1a <- p1 + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_ribbon(data = monthly_casesv1, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'black') + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
p1a
p1a <- p1 + labs(title = 'Cases under 5 \nSeasonality and Offset terms included') + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_ribbon(data = monthly_casesv1, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'black') + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
p1a
p1a <- p1 + labs(title = 'Cases under 5 \nSeasonality and Offset terms included') + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
p1a
df_cases_agg <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (combined age groups) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_point() + labs(title = "Cases <5 Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_point() + labs(title = "Cases <5 Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
df_cases_agg <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
head(df_cases_agg)
df_cases_agg_under5
head(df_cases_agg_under5)
monthly_case
monthly_cases
monthly_casesv1 <- monthly_cases %>%
mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p1 <- ggplot(monthly_cases, aes(x = date, y = under_5_cases)) + geom_point() + theme_linedraw()
p1a <- p1 + labs(title = 'Cases under 5 \nSeasonality and Offset terms included') + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
p1a
df_cases
colnames(df_gps)
df_gps
p1 <- ggplot(monthly_cases, aes(x = date, y = under_5_deaths)) + geom_point() + theme_linedraw()
mod1 <- glm.nb(under_5_deaths ~ date + month + offset(log.offset), data = monthly_cases)
pred1 <- predict(mod1, type = 'response', se.fit = TRUE)
monthly_casesv1 <- monthly_cases %>%
mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p1 <- ggplot(monthly_cases, aes(x = date, y = under_5_deaths)) + geom_point() + theme_linedraw()
p1a <- p1 + labs(title = 'Cases under 5 \nSeasonality and Offset terms included') + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
p1a
mod1 <- glm.nb(under_5_cases ~ date + month + offset(log.offset), data = monthly_cases)
pred1 <- predict(mod1, type = 'response', se.fit = TRUE)
monthly_casesv1 <- monthly_cases %>%
mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p1 <- ggplot(monthly_cases, aes(x = date, y = under_5_cases)) + geom_point() + theme_linedraw()
p1a <- p1 + labs(title = 'Cases under 5 \nSeasonality and Offset terms included') + geom_line(data = monthly_casesv1, aes(x = date, y = pred), color = "#4daf4a") + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
p1a
unique(df_cases$region)
