intro_index <- which(df_ts$date == pcv13_intro_date)
# Estimation when PCV7, PCV10 and PCV13 was introduced
pcv7_intro_date <- as.Date('2009-07-01')
pcv10_intro_date <- as.Date('2011-07-01')
pcv13_intro_date <- as.Date('2013-07-01')
#| fig.width: 6
#| fig.height: 4
# Make predictions with confidence intervals.
pred <- predict(mod1, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred <- df_ts %>%
mutate(se.fit = pred$se.fit, pred = pred$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Plot the newly created model fitting.
p1a <- p1 +
# Add the fitting line.
geom_line(data = df_pred, aes(x = date, y = pred),
color = "#e41a1c") +
# Add the confidence interval.
geom_ribbon(data = df_pred, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit")
p1a
df_ts$month <- as.factor(month(df_ts$date))
# Inspect the first 36 entries.
df_ts$month[1:36]
# Update the model.
mod1a <- glm.nb(under5_deaths ~ date + month, data = df_ts)
summary(mod1a)
#| fig.width: 6
#| fig.height: 4
# Make predictions with confidence intervals.
pred2 <- predict(mod1a, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred2 <- df_ts %>%
mutate(se.fit = pred2$se.fit, pred = pred2$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Plot the newly created model fitting.
p1b <- p1 +
# Add the fitting line.
geom_line(data = df_pred2, aes(x = date, y = pred),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df_pred2, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit\nSeasonality Term Included")
p1b
# Create the offset using all pneumonia cases
df_ts$log_offset <- log(df_ts$under5_cases)
# Refit the model.
model1b <- glm.nb(under5_deaths ~ index + month + offset(log_offset), data = df_ts)
summary(model1b)
#| fig.width: 6
#| fig.height: 4
# Make predictions with confidence intervals.
pred3 <- predict(model1b, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df.pred3 <- df_ts %>%
mutate(se.fit = pred3$se.fit, pred = pred3$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Plot the newly created model fitting.
p1c <- p1 +
# Add the fitting line.
geom_line(data = df.pred3, aes(x = date, y = pred),
color = "#4daf4a") +
# Add the confidence interval.
geom_ribbon(data = df.pred3, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit\nSeasonality Term and Offset")
p1c
intro_index <- which(df_ts$date == pcv13_intro_date)
df_spline <- df_ts %>%
mutate(
spl1 = ifelse(index - intro_index + 1 < 0, 0, index - intro_index + 1)
)
# Inspect the changes.
df_spline[65:80, c("date", "index", "spl1", "spl2")]
intro_index <- which(df_ts$date == pcv13_intro_date)
df_spline <- df_ts %>%
mutate(
spl1 = ifelse(index - intro_index + 1 < 0, 0, index - intro_index + 1)
)
# Inspect the changes.
df_spline[65:80, c("date", "index", "spl1")]
mod4 <- glm.nb(under5_deaths ~ index + month + offset(log.offset) +
# Post-vaccine changes.
spl1, data = df)
mod4 <- glm.nb(under5_deaths ~ index + month + offset(log.offset) +
# Post-vaccine changes.
spl1, data = df_spline)
#| fig.width: 6
#| fig.height: 4
# Make predictions with confidence intervals.
pred3 <- predict(model1b, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df.pred3 <- df_ts %>%
mutate(se.fit = pred3$se.fit, pred = pred3$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Plot the newly created model fitting.
p1c <- p1 +
# Add the fitting line.
geom_line(data = df.pred3, aes(x = date, y = pred),
color = "#4daf4a") +
# Add the confidence interval.
geom_ribbon(data = df.pred3, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit\nSeasonality Term and Offset")
p1c
# Create the offset using all pneumonia cases
df_ts$log_offset <- log(df_ts$under5_cases)
# Refit the model.
model1b <- glm.nb(under5_deaths ~ index + month + offset(log_offset), data = df_ts)
summary(model1b)
intro_index <- which(df_ts$date == pcv13_intro_date)
df_spline <- df_ts %>%
mutate(
spl1 = ifelse(index - intro_index + 1 < 0, 0, index - intro_index + 1)
)
# Inspect the changes.
df_spline[65:80, c("date", "index", "spl1")]
mod4 <- glm.nb(under5_deaths ~ index + month + offset(log.offset) +
# Post-vaccine changes.
spl1, data = df_spline)
mod4 <- glm.nb(under5_deaths ~ index + month + offset(log.offset) +
# Post-vaccine changes.
spl1, data = df_ts)
intro_index <- which(df_ts$date == pcv13_intro_date)
df_ts <- df_ts %>%
mutate(
spl1 = ifelse(index - intro_index + 1 < 0, 0, index - intro_index + 1)
)
# Inspect the changes.
df_ts[65:80, c("date", "index", "spl1")]
# Create the offset using all pneumonia cases
df_ts$log_offset <- log(df_ts$under5_cases)
# Refit the model.
model1b <- glm.nb(under5_deaths ~ index + month + offset(log_offset), data = df_ts)
summary(model1b)
#| fig.width: 6
#| fig.height: 4
# Make predictions with confidence intervals.
pred3 <- predict(model1b, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df.pred3 <- df_ts %>%
mutate(se.fit = pred3$se.fit, pred = pred3$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Plot the newly created model fitting.
p1c <- p1 +
# Add the fitting line.
geom_line(data = df.pred3, aes(x = date, y = pred),
color = "#4daf4a") +
# Add the confidence interval.
geom_ribbon(data = df.pred3, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit\nSeasonality Term and Offset")
p1c
intro_index <- which(df_ts$date == pcv13_intro_date)
df_ts <- df_ts %>%
mutate(
spl1 = ifelse(index - intro_index + 1 < 0, 0, index - intro_index + 1)
)
# Inspect the changes.
df_ts[65:80, c("date", "index", "spl1")]
mod4 <- glm.nb(under5_deaths ~ index + month + offset(log.offset) +
# Post-vaccine changes.
spl1, data = df_ts)
head(df_ts)
# Create the offset using all pneumonia cases
df_ts$log_offset <- log(df_ts$under5_cases)
# Refit the model.
model1b <- glm.nb(under5_deaths ~ index + month + offset(log_offset), data = df_ts)
summary(model1b)
head(df_ts)
#| fig.width: 6
#| fig.height: 4
# Make predictions with confidence intervals.
pred3 <- predict(model1b, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df.pred3 <- df_ts %>%
mutate(se.fit = pred3$se.fit, pred = pred3$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Plot the newly created model fitting.
p1c <- p1 +
# Add the fitting line.
geom_line(data = df.pred3, aes(x = date, y = pred),
color = "#4daf4a") +
# Add the confidence interval.
geom_ribbon(data = df.pred3, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit\nSeasonality Term and Offset")
p1c
intro_index <- which(df_ts$date == pcv13_intro_date)
df_ts <- df_ts %>%
mutate(
spl1 = ifelse(index - intro_index + 1 < 0, 0, index - intro_index + 1)
)
# Inspect the changes.
df_ts[65:80, c("date", "index", "spl1")]
intro_index <- which(df_ts$date == pcv13_intro_date)
df_ts <- df_ts %>%
mutate(
spl1 = ifelse(index - intro_index + 1 < 0, 0, index - intro_index + 1)
)
# Inspect the changes.
df_ts[65:80, c("date", "index", "spl1", "log_offset")]
mod4 <- glm.nb(under5_deaths ~ index + month + offset(log.offset) +
# Post-vaccine changes.
spl1, data = df_ts)
mod4 <- glm.nb(under5_deaths ~ index + month + offset(log_offset) +
# Post-vaccine changes.
spl1, data = df_ts)
summary(mod4)
# Add the prediction using the smoothed model.
df_pred_spl <- df_ts %>%
mutate(pred.spl = predict(mod4, type = "response"))
# Initialize the vacccine effect variables by setting them to 0.
df.counterfactual.spl <- df
df.counterfactual.spl$spl1 <- 0
# Add the prediction using the smoothed model.
df_pred_spl <- df_ts %>%
mutate(pred.spl = predict(mod4, type = "response"))
# Initialize the vacccine effect variables by setting them to 0.
df.counterfactual.spl <- df
df.counterfactual.spl$spl1 <- 0
# Add the prediction using the smoothed model.
df_pred_spl <- df_ts %>%
mutate(pred.spl = predict(mod4, type = "response"))
# Initialize the vacccine effect variables by setting them to 0.
df.counterfactual_spl <- df_ts
df.counterfactual_spl$spl1 <- 0
# Generate the fitted values.
df.pred.spl$pred.spl.cf <- predict(mod4, type = "response",
# Extract fitted value and add to df.pred.
newdata = df.counterfactual.spl)
# Add the prediction using the smoothed model.
df_pred_spl <- df_ts %>%
mutate(pred.spl = predict(mod4, type = "response"))
# Initialize the vacccine effect variables by setting them to 0.
df_counterfactual_spl <- df_ts
df_counterfactual_spl$spl1 <- 0
# Generate the fitted values.
df_pred_spl$pred.spl.cf <- predict(mod4, type = "response",
# Extract fitted value and add to df.pred.
newdata = df_counterfactual_spl)
# Make predictions with confidence intervals.
pred7 <- predict(mod4, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df.pred.spl <- df.pred.spl %>%
mutate(se.fit = pred7$se.fit, pred = pred7$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Make predictions with confidence intervals.
pred7 <- predict(mod4, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred_spl <- df_pred_spl %>%
mutate(se.fit = pred7$se.fit, pred = pred7$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p7 <-
ggplot(df.pred.spl, aes(x = date, y = J12_J18_prim)) +
geom_point() +
# Add the fitted line.
geom_line(data = df.pred.spl, aes(x = date, y = pred.spl),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df.pred.spl, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Add the counterfactual line.
geom_line(data = df.pred.spl, aes(x = date, y = pred.spl.cf),
color = "#e41a1c", lty = 2) +
labs(title = "Deaths with a Negative Binomial Fit\nITS with Spline Smoothing",
x = "Date", y = "Counts for <5 yo") +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
# Make predictions with confidence intervals.
pred7 <- predict(mod4, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred_spl <- df_pred_spl %>%
mutate(se.fit = pred7$se.fit, pred = pred7$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p7 <-
ggplot(df_pred_spl, aes(x = date, y = under5_deaths)) +
geom_point() +
# Add the fitted line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df.pred.spl, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Add the counterfactual line.
geom_line(data = df.pred.spl, aes(x = date, y = pred.spl.cf),
color = "#e41a1c", lty = 2) +
labs(title = "Deaths with a Negative Binomial Fit\nITS with Spline Smoothing",
x = "Date", y = "Counts for <5 yo") +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
# Make predictions with confidence intervals.
pred7 <- predict(mod4, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred_spl <- df_pred_spl %>%
mutate(se.fit = pred7$se.fit, pred = pred7$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p7 <-
ggplot(df_pred_spl, aes(x = date, y = under5_deaths)) +
geom_point() +
# Add the fitted line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df_pred_spl, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Add the counterfactual line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl.cf),
color = "#e41a1c", lty = 2) +
labs(title = "Deaths with a Negative Binomial Fit\nITS with Spline Smoothing",
x = "Date", y = "Counts for <5 yo") +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
# Make predictions with confidence intervals.
pred7 <- predict(mod4, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred_spl <- df_pred_spl %>%
mutate(se.fit = pred7$se.fit, pred = pred7$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p7 <-
ggplot(df_pred_spl, aes(x = date, y = under5_deaths)) +
geom_point() +
# Add the fitted line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df_pred_spl, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Add the counterfactual line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl.cf),
color = "#e41a1c", lty = 2) +
labs(title = "Deaths with a Negative Binomial Fit\nITS with Spline Smoothing",
x = "Date", y = "Counts for <5 yo") +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
p7
df_pre13 <- df_ts
#Set the pneumonia variable to NA during the post-vaccine period
df_pre13$under5_deaths_pre <- df_pre13$under5_deaths
df_pre13$under5_deaths_pre[which(df_pre13$date >= pcv13.intro.date)] <- NA
mod5<- glm.nb(under5_deaths_pre ~ index # Time trend
+ month # Seasonality
+ offset(log_offset), data = df_pre13)
# Add the prediction using the smoothed model.
ds.pred.mod5 <- df_pre13 %>%
mutate(pred.mod5 = predict(mod5, type = "response", newdata = df_pre13))
p9 <- ggplot(ds.pred.mod5, aes(x=date, y=under5_deaths_pre)) +
geom_point() +
ylab("Deaths, <5 yo") +
xlab("Date") +
theme_linedraw() +
theme(panel.spacing= unit(2,'lines') , axis.text.x=element_text(angle=90)) +
geom_hline(yintercept=0, col='gray', lty=2) +
geom_line(color='#377eb8', data=ds.pred.mod5, aes(x=date, y=pred.mod5))
p9
# Make predictions with confidence intervals.
pred7 <- predict(mod4, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred_spl <- df_pred_spl %>%
mutate(se.fit = pred7$se.fit, pred = pred7$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p7 <-
ggplot(df_pred_spl, aes(x = date, y = under5_deaths)) +
geom_point() +
# Add the fitted line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df_pred_spl, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Add the counterfactual line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl.cf),
color = "#e41a1c", lty = 2) +
labs(title = "Deaths with a Negative Binomial Fit\nITS with Spline Smoothing",
x = "Date", y = "Counts for <5 yo") +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
p7
# Add the prediction using the smoothed model.
df_pred_spl <- df_ts %>%
mutate(pred.spl = predict(mod4, type = "response"))
# Make predictions with confidence intervals.
pred7 <- predict(mod4, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred_spl <- df_pred_spl %>%
mutate(se.fit = pred7$se.fit, pred = pred7$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p7 <-
ggplot(df_pred_spl, aes(x = date, y = under5_deaths)) +
geom_point() +
# Add the fitted line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df_pred_spl, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Add the counterfactual line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl.cf),
color = "#e41a1c", lty = 2) +
labs(title = "Deaths with a Negative Binomial Fit\nITS with Spline Smoothing",
x = "Date", y = "Counts for <5 yo") +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
p7
# Make predictions with confidence intervals.
pred7 <- predict(mod4, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred_spl <- df_pred_spl %>%
mutate(se.fit = pred7$se.fit, pred = pred7$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p7 <-
ggplot(df_pred_spl, aes(x = date, y = under5_deaths)) +
geom_point() +
# Add the fitted line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df_pred_spl, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
labs(title = "Deaths with a Negative Binomial Fit\nITS with Spline Smoothing",
x = "Date", y = "Counts for <5 yo") +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
p7
df_pre13 <- df_ts
#Set the pneumonia variable to NA during the post-vaccine period
df_pre13$under5_deaths_pre <- df_pre13$under5_deaths
df_pre13$under5_deaths_pre[which(df_pre13$date >= pcv13.intro.date)] <- NA
df_pre13 <- df_ts
#Set the pneumonia variable to NA during the post-vaccine period
df_pre13$under5_deaths_pre <- df_pre13$under5_deaths
df_pre13$under5_deaths_pre[which(df_pre13$date >= pcv13.intro.date)] <- NA
mod5<- glm.nb(under5_deaths_pre ~ index # Time trend
+ month # Seasonality
+ offset(log_offset), data = df_pre13)
# Add the prediction using the smoothed model.
ds.pred.mod5 <- df_pre13 %>%
mutate(pred.mod5 = predict(mod5, type = "response", newdata = df_pre13))
p9 <- ggplot(ds.pred.mod5, aes(x=date, y=under5_deaths_pre)) +
geom_point() +
ylab("Deaths, <5 yo") +
xlab("Date") +
theme_linedraw() +
theme(panel.spacing= unit(2,'lines') , axis.text.x=element_text(angle=90)) +
geom_hline(yintercept=0, col='gray', lty=2) +
geom_line(color='#377eb8', data=ds.pred.mod5, aes(x=date, y=pred.mod5))
p9
