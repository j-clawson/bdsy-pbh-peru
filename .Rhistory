theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
p7
df_pre13 <- df_ts
#Set the pneumonia variable to NA during the post-vaccine period
df_pre13$under5_deaths_pre <- df_pre13$under5_deaths
df_pre13$under5_deaths_pre[which(df_pre13$date >= pcv13.intro.date)] <- NA
mod5<- glm.nb(under5_deaths_pre ~ index # Time trend
+ month # Seasonality
+ offset(log_offset), data = df_pre13)
# Add the prediction using the smoothed model.
ds.pred.mod5 <- df_pre13 %>%
mutate(pred.mod5 = predict(mod5, type = "response", newdata = df_pre13))
p9 <- ggplot(ds.pred.mod5, aes(x=date, y=under5_deaths_pre)) +
geom_point() +
ylab("Deaths, <5 yo") +
xlab("Date") +
theme_linedraw() +
theme(panel.spacing= unit(2,'lines') , axis.text.x=element_text(angle=90)) +
geom_hline(yintercept=0, col='gray', lty=2) +
geom_line(color='#377eb8', data=ds.pred.mod5, aes(x=date, y=pred.mod5))
p9
# Make predictions with confidence intervals.
pred7 <- predict(mod4, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred_spl <- df_pred_spl %>%
mutate(se.fit = pred7$se.fit, pred = pred7$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p7 <-
ggplot(df_pred_spl, aes(x = date, y = under5_deaths)) +
geom_point() +
# Add the fitted line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df_pred_spl, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Add the counterfactual line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl.cf),
color = "#e41a1c", lty = 2) +
labs(title = "Deaths with a Negative Binomial Fit\nITS with Spline Smoothing",
x = "Date", y = "Counts for <5 yo") +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
p7
# Add the prediction using the smoothed model.
df_pred_spl <- df_ts %>%
mutate(pred.spl = predict(mod4, type = "response"))
# Make predictions with confidence intervals.
pred7 <- predict(mod4, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred_spl <- df_pred_spl %>%
mutate(se.fit = pred7$se.fit, pred = pred7$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p7 <-
ggplot(df_pred_spl, aes(x = date, y = under5_deaths)) +
geom_point() +
# Add the fitted line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df_pred_spl, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Add the counterfactual line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl.cf),
color = "#e41a1c", lty = 2) +
labs(title = "Deaths with a Negative Binomial Fit\nITS with Spline Smoothing",
x = "Date", y = "Counts for <5 yo") +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
p7
# Make predictions with confidence intervals.
pred7 <- predict(mod4, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred_spl <- df_pred_spl %>%
mutate(se.fit = pred7$se.fit, pred = pred7$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
p7 <-
ggplot(df_pred_spl, aes(x = date, y = under5_deaths)) +
geom_point() +
# Add the fitted line.
geom_line(data = df_pred_spl, aes(x = date, y = pred.spl),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df_pred_spl, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
labs(title = "Deaths with a Negative Binomial Fit\nITS with Spline Smoothing",
x = "Date", y = "Counts for <5 yo") +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
p7
df_pre13 <- df_ts
#Set the pneumonia variable to NA during the post-vaccine period
df_pre13$under5_deaths_pre <- df_pre13$under5_deaths
df_pre13$under5_deaths_pre[which(df_pre13$date >= pcv13.intro.date)] <- NA
df_pre13 <- df_ts
#Set the pneumonia variable to NA during the post-vaccine period
df_pre13$under5_deaths_pre <- df_pre13$under5_deaths
df_pre13$under5_deaths_pre[which(df_pre13$date >= pcv13.intro.date)] <- NA
mod5<- glm.nb(under5_deaths_pre ~ index # Time trend
+ month # Seasonality
+ offset(log_offset), data = df_pre13)
# Add the prediction using the smoothed model.
ds.pred.mod5 <- df_pre13 %>%
mutate(pred.mod5 = predict(mod5, type = "response", newdata = df_pre13))
p9 <- ggplot(ds.pred.mod5, aes(x=date, y=under5_deaths_pre)) +
geom_point() +
ylab("Deaths, <5 yo") +
xlab("Date") +
theme_linedraw() +
theme(panel.spacing= unit(2,'lines') , axis.text.x=element_text(angle=90)) +
geom_hline(yintercept=0, col='gray', lty=2) +
geom_line(color='#377eb8', data=ds.pred.mod5, aes(x=date, y=pred.mod5))
p9
knitr::opts_chunk$set(echo = TRUE)
#| eval: FALSE
renv::init()      # Initialize the project
#| eval: FALSE
renv::init()      # Initialize the project
knitr::opts_chunk$set(echo = TRUE)
#| eval: FALSE
renv::init()      # Initialize the project
renv::restore()   # Download packages and their version saved in the lockfile
knitr::opts_chunk$set(echo = TRUE)
#| message: FALSE
#| warning: FALSE
suppressPackageStartupMessages({
library("readr")      # For reading in the data
library("tibble")     # For handling tidyverse tibble data classes
library("tidyr")      # For tidying data
library("dplyr")      # For data manipulation
library("stringr")    # For string manipulation
library("MASS")       # Functions/datasets for statistical analysis
library("lubridate")  # For date manipulation
library("ggplot2")    # For creating static visualizations
library("patchwork")  # For plot stacking
library("RColorBrewer")# For colors in graphs.
library("scales")     # For formatting plots axis
library("gridExtra")  # Creates multiple grid-based plots
})
# Function to select "Not In"
'%!in%' <- function(x,y)!('%in%'(x,y))
peru <- read.csv('data\\peru.csv')
peru <- read.csv('data\\peru.csv')
colnames(peru) <- c('region', 'province', 'district', 'year', 'week', 'department_code', 'geo_code', 'under_5_noncase', 'under_5_case', 'over_60_case', 'under_5_hospitalized', 'over_60_hospitalized', 'under_5_death', 'over_60_death')
# Estimation when PCV7, PCV10 and PCV13 was introduced
pcv7_intro_date <- as.Date('2009-07-01')
pcv10_intro_date <- as.Date('2011-07-01')
pcv13_intro_date <- as.Date('2013-07-01')
df_nation <- peru[c("year","week", "under_5_death", "under_5_case")]
#Group by year, week
df_nation <- df_nation %>%
group_by(year, week) %>%
summarise(
total_under_5 = sum(under_5_death, na.rm = TRUE),
total_under_5_cases = sum(under_5_case, na.rm = TRUE),
.groups = "drop"
)
#Format week in standard format
df_nation <- df_nation %>%
mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week-1))
#Aggregate into monthly counts
df_nation <- df_nation %>%
mutate(date = floor_date(date, "month")) %>%
group_by(date) %>%
summarise(
under5_deaths = sum(total_under_5,   na.rm = TRUE),
under5_cases = sum(total_under_5_cases, na.rm= TRUE),
.groups = "drop"
)
df_region <- peru[c("year","week", "region", "under_5_death", "under_5_case")]
#Group by year, week
df_region <- df_region %>%
group_by(year, week, region) %>%
summarise(
under_5_deaths = sum(under_5_death, na.rm = TRUE),
under_5_cases = sum(under_5_case, na.rm = TRUE),
.groups = "drop"
)
#Format week in standard format
df_region <- df_region %>%
mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week-1))
#Aggregate into monthly counts
df_region <- df_region %>%
mutate(date = floor_date(date, "month")) %>%
group_by(date, region) %>%
summarise(
under5_deaths = sum(under_5_deaths,   na.rm = TRUE),
under5_cases = sum(under_5_cases, na.rm = TRUE),
.groups = "drop"
)
df_nation <- tibble::rownames_to_column(df_nation, var = "index") %>%
mutate(index = as.numeric(index))
#| fig.width: 6
#| fig.height: 4
p1 <-
ggplot(df_nation, aes(x = date, y = under5_deaths)) +
geom_point() +
labs(title = "<5 yo Deaths Scatter Plot",
x = "Date", y = "Counts") +
# Have y-axis for the two plots be the same.
ylim(0, NA) +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
p1
#| fig.width: 6
#| fig.height: 4
# Make predictions with confidence intervals.
pred <- predict(mod1, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred <- df_nation %>%
mutate(se.fit = pred$se.fit, pred = pred$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Plot the newly created model fitting.
p1a <- p1 +
# Add the fitting line.
geom_line(data = df_pred, aes(x = date, y = pred),
color = "#e41a1c") +
# Add the confidence interval.
geom_ribbon(data = df_pred, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit")
p1a
df_nation$month <- as.factor(month(df_nation$date))
# Inspect the first 36 entries.
df_nation$month[1:36]
# Update the model.
mod1a <- glm.nb(under5_deaths ~ date + month, data = df_nation)
summary(mod1a)
#| fig.width: 6
#| fig.height: 4
# Make predictions with confidence intervals.
pred2 <- predict(mod1a, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df_pred2 <- df_nation %>%
mutate(se.fit = pred2$se.fit, pred = pred2$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Plot the newly created model fitting.
p1b <- p1 +
# Add the fitting line.
geom_line(data = df_pred2, aes(x = date, y = pred),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df_pred2, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit\nSeasonality Term Included")
p1b
# Create the offset using all pneumonia cases
df_nation$log_offset <- log(df_nation$under5_cases)
# Refit the model.
model1b <- glm.nb(under5_deaths ~ index + month + offset(log_offset), data = df_nation)
summary(model1b)
#| fig.width: 6
#| fig.height: 4
# Make predictions with confidence intervals.
pred3 <- predict(model1b, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df.pred3 <- df_nation %>%
mutate(se.fit = pred3$se.fit, pred = pred3$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Plot the newly created model fitting.
p1c <- p1 +
# Add the fitting line.
geom_line(data = df.pred3, aes(x = date, y = pred),
color = "#4daf4a") +
# Add the confidence interval.
geom_ribbon(data = df.pred3, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit\nSeasonality Term and Offset")
p1c
intro_index <- which(df_nation$date == pcv13_intro_date)
df_nation <- df_nation %>%
mutate(
spl1 = ifelse(index - intro_index + 1 < 0, 0, index - intro_index + 1)
)
# Inspect the changes.
df_nation[65:80, c("date", "index", "spl1", "log_offset")]
spline_model <- glm.nb(under5_deaths ~ index + month + offset(log_offset) +
# Post-vaccine changes.
spl1, data = df_nation)
summary(spline_model)
df_pre13 <- df_nation
#Set the pneumonia variable to NA during the post-vaccine period
df_pre13$under5_deaths_pre <- df_pre13$under5_deaths
df_pre13$under5_deaths_pre[which(df_pre13$date >= pcv13_intro_date)] <- NA
cf_model<- glm.nb(under5_deaths_pre ~ index # Time trend
+ month # Seasonality
+ offset(log_offset), data = df_pre13)
# Add the prediction using the smoothed model.
ds.pred.cf_model <- df_pre13 %>%
mutate(pred.cf_model = predict(cf_model, type = "response", newdata = df_pre13))
df_pre13 <- df_nation
#Set the pneumonia variable to NA during the post-vaccine period
df_pre13$under5_deaths_pre <- df_pre13$under5_deaths
df_pre13$under5_deaths_pre[which(df_pre13$date >= pcv13_intro_date)] <- NA
cf_model<- glm.nb(under5_deaths_pre ~ index # Time trend
+ month # Seasonality
+ offset(log_offset), data = df_pre13)
# Add the prediction using the smoothed model.
ds.pred.cf_model <- df_pre13 %>%
mutate(pred.cf_model = predict(cf_model, type = "response", newdata = df_pre13))
df_pre13 <- df_nation
#Set the pneumonia variable to NA during the post-vaccine period
df_pre13$under5_deaths_pre <- df_pre13$under5_deaths
df_pre13$under5_deaths_pre[which(df_pre13$date >= pcv13_intro_date)] <- NA
cf_model<- glm.nb(under5_deaths_pre ~ index # Time trend
+ month # Seasonality
+ offset(log_offset), data = df_pre13)
# Add the prediction using the smoothed model.
ds.pred.cf_model <- df_pre13 %>%
mutate(pred.cf_model = predict(cf_model, type = "response", newdata = df_pre13))
p9 <- ggplot(ds.pred.cf_model, aes(x = date)) +
# observed points
geom_point(aes(y = under5_deaths_pre, color = "Observed"), size = 1, alpha = 0.6) +
# fitted (counterfactual) line
geom_line( aes(y = pred.cf_model,    color = "Fitted model"),  size = 0.6) +
# vaccine rollout
geom_vline(aes(xintercept = pcv13_intro_date, color = "PCV13 implementation"),
linetype = "dashed", size = 1) +
# now define the legend entries and their colours
scale_color_manual(
name = "",    # no legend title
values = c(
"Observed"      = "black",
"Fitted model"  = "#8ecae6",
"PCV13 implementation" = "#fb8500"
)
) +
# if you want shapes in the legend for points:
scale_shape_manual(
name   = "",
values = c("Observed" = 16)
) +
labs(
title = "Extrapolation Based on the Pre-Vaccine Period",
x     = "Date",
y     = "<5 Deaths"
) +
theme_linedraw() +
theme(
axis.text.x     = element_text(size = 10, angle = 90, hjust = 1),
axis.text.y     = element_text(size = 10),
legend.position = "top",
legend.text     = element_text(size = 12)
)
p9
df_pre13 <- df_nation
#Set the pneumonia variable to NA during the post-vaccine period
df_pre13$under5_deaths_pre <- df_pre13$under5_deaths
df_pre13$log_offset_pre <- df_pre13$log_offset
df_pre13$under5_deaths_pre[which(df_pre13$date >= pcv13_intro_date)] <- NA
df_pre13$log_offset_pre[which(df_pre13$date >= pcv13_intro_date)] <- NA
cf_model<- glm.nb(under5_deaths_pre ~ index # Time trend
+ month # Seasonality
+ offset(log_offset_pre), data = df_pre13)
# Add the prediction using the smoothed model.
ds.pred.cf_model <- df_pre13 %>%
mutate(pred.cf_model = predict(cf_model, type = "response", newdata = df_pre13))
p9 <- ggplot(ds.pred.cf_model, aes(x = date)) +
# observed points
geom_point(aes(y = under5_deaths_pre, color = "Observed"), size = 1, alpha = 0.6) +
# fitted (counterfactual) line
geom_line( aes(y = pred.cf_model,    color = "Fitted model"),  size = 0.6) +
# vaccine rollout
geom_vline(aes(xintercept = pcv13_intro_date, color = "PCV13 implementation"),
linetype = "dashed", size = 1) +
# now define the legend entries and their colours
scale_color_manual(
name = "",    # no legend title
values = c(
"Observed"      = "black",
"Fitted model"  = "#8ecae6",
"PCV13 implementation" = "#fb8500"
)
) +
# if you want shapes in the legend for points:
scale_shape_manual(
name   = "",
values = c("Observed" = 16)
) +
labs(
title = "Extrapolation Based on the Pre-Vaccine Period",
x     = "Date",
y     = "<5 Deaths"
) +
theme_linedraw() +
theme(
axis.text.x     = element_text(size = 10, angle = 90, hjust = 1),
axis.text.y     = element_text(size = 10),
legend.position = "top",
legend.text     = element_text(size = 12)
)
p9
head(df_pre13)
tail(df_pre13)
cf_model<- glm.nb(under5_deaths_pre ~ index # Time trend
+ month # Seasonality
+ offset(log_offset_pre), data = df_pre13)
# Add the prediction using the smoothed model.
ds.pred.cf_model <- df_pre13 %>%
mutate(pred.cf_model = predict(cf_model, type = "response", newdata = df_pre13))
p9 <- ggplot(ds.pred.cf_model, aes(x = date)) +
# observed points
geom_point(aes(y = under5_deaths_pre, color = "Observed"), size = 1, alpha = 0.6) +
# fitted (counterfactual) line
geom_line( aes(y = pred.cf_model,    color = "Fitted model"),  size = 0.6) +
# vaccine rollout
geom_vline(aes(xintercept = pcv13_intro_date, color = "PCV13 implementation"),
linetype = "dashed", size = 1) +
# now define the legend entries and their colours
scale_color_manual(
name = "",    # no legend title
values = c(
"Observed"      = "black",
"Fitted model"  = "#8ecae6",
"PCV13 implementation" = "#fb8500"
)
) +
# if you want shapes in the legend for points:
scale_shape_manual(
name   = "",
values = c("Observed" = 16)
) +
labs(
title = "Extrapolation Based on the Pre-Vaccine Period",
x     = "Date",
y     = "<5 Deaths"
) +
theme_linedraw() +
theme(
axis.text.x     = element_text(size = 10, angle = 90, hjust = 1),
axis.text.y     = element_text(size = 10),
legend.position = "top",
legend.text     = element_text(size = 12)
)
p9
df_pre13 <- df_nation
#Set the pneumonia variable to NA during the post-vaccine period
df_pre13$under5_deaths_pre <- df_pre13$under5_deaths
df_pre13$under5_deaths_pre[which(df_pre13$date >= pcv13_intro_date)] <- NA
cf_model<- glm.nb(under5_deaths_pre ~ index # Time trend
+ month # Seasonality
+ offset(log_offset), data = df_pre13)
# Add the prediction using the smoothed model.
ds.pred.cf_model <- df_pre13 %>%
mutate(pred.cf_model = predict(cf_model, type = "response", newdata = df_pre13))
p9 <- ggplot(ds.pred.cf_model, aes(x = date)) +
# observed points
geom_point(aes(y = under5_deaths_pre, color = "Observed"), size = 1, alpha = 0.6) +
# fitted (counterfactual) line
geom_line( aes(y = pred.cf_model,    color = "Fitted model"),  size = 0.6) +
# vaccine rollout
geom_vline(aes(xintercept = pcv13_intro_date, color = "PCV13 implementation"),
linetype = "dashed", size = 1) +
# now define the legend entries and their colours
scale_color_manual(
name = "",    # no legend title
values = c(
"Observed"      = "black",
"Fitted model"  = "#8ecae6",
"PCV13 implementation" = "#fb8500"
)
) +
# if you want shapes in the legend for points:
scale_shape_manual(
name   = "",
values = c("Observed" = 16)
) +
labs(
title = "Extrapolation Based on the Pre-Vaccine Period",
x     = "Date",
y     = "<5 Deaths"
) +
theme_linedraw() +
theme(
axis.text.x     = element_text(size = 10, angle = 90, hjust = 1),
axis.text.y     = element_text(size = 10),
legend.position = "top",
legend.text     = element_text(size = 12)
)
p9
