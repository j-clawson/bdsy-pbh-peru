knitr::opts_chunk$set(echo = TRUE)
peru <- read.csv('peru.csv')
peru <- read.csv('data\peru.csv')
peru <- read.csv('data\\peru.csv')
peru <- read.csv('data\\peru\\peru.csv')
glimpse(df)
#| message: FALSE
#| warning: FALSE
suppressPackageStartupMessages({
library("readr")      # For reading in the data
library("tibble")     # For handling tidyverse tibble data classes
library("tidyr")      # For tidying data
library("dplyr")      # For data manipulation
library("stringr")    # For string manipulation
library("MASS")       # Functions/datasets for statistical analysis
library("lubridate")  # For date manipulation
library("ggplot2")    # For creating static visualizations
library("scales")     # For formatting plots axis
library("gridExtra")  # Creates multiple grid-based plots
})
#| eval: FALSE
renv::init()      # Initialize the project
renv::restore()   # Download packages and their version saved in the lockfile
knitr::opts_chunk$set(echo = TRUE)
#| message: FALSE
#| warning: FALSE
suppressPackageStartupMessages({
library("readr")      # For reading in the data
library("tibble")     # For handling tidyverse tibble data classes
library("tidyr")      # For tidying data
library("dplyr")      # For data manipulation
library("stringr")    # For string manipulation
library("MASS")       # Functions/datasets for statistical analysis
library("lubridate")  # For date manipulation
library("ggplot2")    # For creating static visualizations
library("scales")     # For formatting plots axis
library("gridExtra")  # Creates multiple grid-based plots
})
install.packages(
c(
"readr",
"tibble",
"tidyr",
"dplyr",
"stringr",
"MASS",
"lubridate",
"ggplot2",
"scales",
"gridExtra"
),
dependencies = TRUE
)
#| eval: FALSE
renv::init()      # Initialize the project
renv::restore()   # Download packages and their version saved in the lockfile
knitr::opts_chunk$set(echo = TRUE)
#| message: FALSE
#| warning: FALSE
suppressPackageStartupMessages({
library("readr")      # For reading in the data
library("tibble")     # For handling tidyverse tibble data classes
library("tidyr")      # For tidying data
library("dplyr")      # For data manipulation
library("stringr")    # For string manipulation
library("MASS")       # Functions/datasets for statistical analysis
library("lubridate")  # For date manipulation
library("ggplot2")    # For creating static visualizations
library("scales")     # For formatting plots axis
library("gridExtra")  # Creates multiple grid-based plots
})
# Function to select "Not In"
'%!in%' <- function(x,y)!('%in%'(x,y))
df <- read.csv('data\\peru\\peru.csv')
glimpse(df)
glimpse(df)
colnames(df) <- c('region', 'province', 'district', 'year', 'week', 'department_code', 'geographical_code', 'under_5_noncase', 'under_5_case', 'over_60_case', 'under_5_hospitalized', 'over_60_hospitalized', 'under_5_death', 'over_60_death')
glimpse(df)
summary(df)
colnames(df) <- c('region', 'province', 'district', 'year', 'week', 'department_code', 'geo_code', 'under_5_noncase', 'under_5_case', 'over_60_case', 'under_5_hospitalized', 'over_60_hospitalized', 'under_5_death', 'over_60_death')
glimpse(df)
colnames(df) <- c('region', 'province', 'district', 'year', 'week', 'department_code', 'geocode', 'under_5_noncase', 'under_5_case', 'over_60_case', 'under_5_hospitalized', 'over_60_hospitalized', 'under_5_death', 'over_60_death')
glimpse(df)
colnames(df) <- c('region', 'province', 'district', 'year', 'week', 'department_code', 'geo_code', 'under_5_noncase', 'under_5_case', 'over_60_case', 'under_5_hospitalized', 'over_60_hospitalized', 'under_5_death', 'over_60_death')
glimpse(df)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library("readr")      # For reading in the data
library("tibble")     # For handling tidyverse tibble data classes
library("tidyr")      # For tidying data
library("dplyr")      # For data manipulation
library("stringr")    # For string manipulation
library("MASS")       # Functions/datasets for statistical analysis
library("lubridate")  # For date manipulation
library("ggplot2")    # For creating static visualizations
library("scales")     # For formatting plots axis
library("gridExtra")  # Creates multiple grid-based plots
})
# Function to select "Not In"
'%!in%' <- function(x,y)!('%in%'(x,y))
df_cases <- read.csv('data\\peru\\peru.csv')
df_cases <- read.csv('data\\peru.csv')
df_gps <- read.csv('data\\peru_gps.csv')
colnames(df_cases) <- c('region', 'province', 'district', 'year', 'week', 'department_code', 'geo_code', 'under_5_noncase', 'under_5_case', 'over_60_case', 'under_5_hospitalized', 'over_60_hospitalized', 'under_5_death', 'over_60_death')
colnames(df_cases)
agg_data <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case + over_60_case, na.rm = TRUE)) %>% ungroup()
agg_data
agg_data <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case + over_60_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
agg_data
agg_data$date
df_cases %>% mutate(date = agg_data$date)
agg_data
df_cases_agg <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case + over_60_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line()
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (combined age groups) Scatter Plot", x = "Date", y = "total cases") + theme_linedraw()
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (combined age groups) Graph", x = "Date", y = "total cases") + theme_linedraw()
df_cases_agg_over60 <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(over_60_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
ggplot(df_cases_agg_over60, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (combined age groups) Graph", x = "Date", y = "total cases") + theme_linedraw()
df_cases_agg_under5 <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
ggplot(df_cases_agg_under5, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (> 60) Graph", x = "Date", y = "total cases") + theme_linedraw()
pcv10.intro.date <- as.Date('2011-06-01')
pcv13.intro.date <- as.Date('2013-06-01')
ggplot(df_cases_agg_under5, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (> 60) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv.13.intro.date, col = 'blue', lty = 2)
pcv10.intro.date <- as.Date('2011-06-01')
pcv13.intro.date <- as.Date('2013-06-01')
df_cases_agg <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case + over_60_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (combined age groups) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv.13.intro.date, col = 'blue', lty = 2)
pcv13.intro.date <- as.Date('2013-06-01')
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (combined age groups) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv.13.intro.date, col = 'blue', lty = 2)
df_cases_agg <- df_cases %>% group_by(year, week) %>% summarise(total_cases = sum(under_5_case + over_60_case, na.rm = TRUE)) %>% ungroup() %>% mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week - 1))
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (combined age groups) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
ggplot(df_cases_agg_over60, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (> 60) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
ggplot(df_cases_agg_under5, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (> 60) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
ggplot(df_cases_agg_over60, aes(x = date, y = total_cases)) + geom_line() + labs(title = "Cases (> 60) Graph", x = "Date", y = "total cases") + theme_linedraw() + geom_vline(xintercept = pcv10.intro.date, col = 'red', lty = 2) + geom_vline(xintercept = pcv13.intro.date, col = 'blue', lty = 2)
df_cases_agg$month <- as.factor(month(df_cases_agg$date))
df_cases_agg
df_cases_agg$month <- as.factor(month(df_cases_agg$date))
mod1 <- glm.nb(total_cases ~ date + month)
mod1 <- glm.nb(total_cases ~ date + month, data = df_cases_agg)
summary(mod1a)
summary(mod1)
pred1 <- predict(mod1, type = 'response', se.fit = TRUE)
pred1 <- predict(mod1, type = 'response', se.fit = TRUE)
df_cases_agg <- df_cases_agg %>% mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>% mutate(conf.low = pred - 1.96 * se.fit, conf.high = pred + 1.96 * se.fit)
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8") + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue')
mod1 <- glm.nb(total_cases ~ date, data = df_cases_agg)
pred1 <- predict(mod1, type = 'response', se.fit = TRUE)
df_cases_agg <- df_cases_agg %>% mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>% mutate(conf.low = pred - 1.96 * se.fit, conf.high = pred + 1.96 * se.fit)
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8") + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue')
weeks(1)
weeks(0)
weeks(2)
weeks(3)
weeks(4)
weeks(5)
weeks(100)
weeks(1042343.2)
weeks(24234235u43973)
weeks(3235423542)
weeks(235738946483653465743678236487236482348623478623746823648723648726348762384762384623876478236487236487326)
weeks(123456)
weeks(10000)
df_cases_agg
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line()
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8") + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue')
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8") + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue')
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8")
ggplot(df_cases_agg, aes(x = date, y = total_cases))
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_line()
# Read in the cleaned data directly from the instructor's GitHub.
df <- read_csv("https://raw.githubusercontent.com/ysph-dsde/bdsy-phm/refs/heads/main/Data/ec_2to59m.csv")
# Estimation when the vaccine was introduced in YYYY-MM-DD format.
vax.intro.date <- as.Date('2010-08-01')
# Date when vaccine efficacy evaluations started; at least
# 12 months following administration.
vax.eval.date <- as.Date('2011-08-01')
p1 <-
ggplot(df, aes(x = date, y = J12_J18_prim)) +
geom_line() +
labs(title = "Deaths Categorized by\nICD-10 Codes J12-18",
x = "Date", y = "Counts for <5 yo") +
# Have y-axis for the two plots be the same.
ylim(0, 250) +
# Reference line.
geom_vline(xintercept = vax.intro.date, col = 'red', lty = 2) +
theme_linedraw()
p2 <-
ggplot(df, aes(x = date, y = acm_noj_prim)) +
geom_line() +
labs(title = "Deaths Categorized by\nNon-J chapter ICD-10 Codes",
x = "Date", y = "Counts for <5 yo") +
# Have y-axis for the two plots be the same.
ylim(0, 250) +
# Reference line.
geom_vline(xintercept = vax.intro.date, col = 'red', lty = 2) +
theme_linedraw()
p1 <-
ggplot(df, aes(x = date, y = J12_J18_prim)) +
geom_point() +
labs(title = "Deaths Scatter Plot",
x = "Date", y = "Counts for <5 yo") +
# Have y-axis for the two plots be the same.
ylim(0, NA) +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
p1
# For modeling, we need to use an ordered, discrete variable. Simply, we
# can use the rownames for this purpose.
df <- tibble::rownames_to_column(df, var = "index") %>%
mutate(index = as.numeric(index))
# Apply the negative binomial regression.
mod1 <- glm.nb(J12_J18_prim ~ index , data = df)
# Make predictions with confidence intervals.
pred <- predict(mod1, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df.pred <- df %>%
mutate(se.fit = pred$se.fit, pred = pred$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Plot the newly created model fitting.
p1a <- p1 +
# Add the fitting line.
geom_line(data = df.pred, aes(x = date, y = pred),
color = "#e41a1c") +
# Add the confidence interval.
geom_ribbon(data = df.pred, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit")
p1a
df$month <- as.factor(month(df$date))
# Update the model.
mod1a <- glm.nb(J12_J18_prim ~ date + month, data = df)
# Make predictions with confidence intervals.
pred2 <- predict(mod1a, type = "response", se.fit = TRUE)
# Add the model predictions and 95% COI to the dataframe.
df.pred2 <- df %>%
mutate(se.fit = pred2$se.fit, pred = pred2$fit) %>%
mutate(
conf.low = pred - 1.96 * se.fit,
conf.high = pred + 1.96 * se.fit
)
# Plot the newly created model fitting.
p1b <- p1 +
# Add the fitting line.
geom_line(data = df.pred2, aes(x = date, y = pred),
color = "#377eb8") +
# Add the confidence interval.
geom_ribbon(data = df.pred2, aes(ymin = conf.low, ymax = conf.high),
alpha = 0.2, fill = "blue") +
# Change the title name.
labs(title = "Deaths with a Negative Binomial Fit\nSeasonality Term Included")
p1b
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_point() + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8") + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue')
mod1 <- glm.nb(total_cases ~ as.Date(date) + month, data = df_cases_agg)
pred1 <- predict(mod1, type = 'response', se.fit = TRUE)
df_cases_agg <- df_cases_agg %>% mutate(se.fit = pred1$se.fit, pred = pred1$fit) %>% mutate(conf.low = pred - 1.96 * se.fit, conf.high = pred + 1.96 * se.fit)
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_point() + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8") + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue')
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_point() + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8", size = 1.2) + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue')
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_point() + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8") + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue', size = 1.2)
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_point() + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8") + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue', size = 2)
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_point() + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8") + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue', size = 20)
ggplot(df_cases_agg, aes(x = date, y = total_cases)) + geom_point() + geom_line(data = df_cases_agg, aes(x = date, y = pred), color = "#377eb8", size = 2) + geom_ribbon(data = df_cases_agg, aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = 'blue')
