ggplot(diamonds, aes(carat)) + geom_histogram()
starwars %>% filter(mass > mean(mass, na.rm=TRUE))
ggplot(diamonds, aes(carat)) + geom_histogram()
ggplot(diamonds, aes(carat)) + geom_histogram()
ggplot(diamonds, aes(carat)) + geom_histogram()
install.packages("tidyverse")
install.packages("gapminder")
library("tidyverse")
library("gapminder")
starwars %>% filter(mass > mean(mass, na.rm = TRUE))
ggplot(diamonds, aes(carat)) + geom_histogram()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(stringr)
library(reshape2)
library(dplyr)
library(tidyr)
library(stringr)
library(reshape2)
library(lubridate)
library(rgdal)
library(maptools)
library(MASS)
library(rjags)
renv::init()
knitr::opts_chunk$set(echo = TRUE)
#| eval: FALSE
renv::init()      # Initialize the project
knitr::opts_chunk$set(echo = TRUE)
#| message: FALSE
#| warning: FALSE
suppressPackageStartupMessages({
library("readr")      # For reading in the data
library("tibble")     # For handling tidyverse tibble data classes
library("tidyr")      # For tidying data
library("dplyr")      # For data manipulation
library("stringr")    # For string manipulation
library("MASS")       # Functions/datasets for statistical analysis
library("lubridate")  # For date manipulation
library("ggplot2")    # For creating static visualizations
library("RColorBrewer")# For colors in graphs.
library("scales")     # For formatting plots axis
library("gridExtra")  # Creates multiple grid-based plots
})
# Function to select "Not In"
'%!in%' <- function(x,y)!('%in%'(x,y))
peru <- read.csv('data\\peru.csv')
colnames(peru) <- c('region', 'province', 'district', 'year', 'week', 'department_code', 'geo_code', 'under_5_noncase', 'under_5_case', 'over_60_case', 'under_5_hospitalized', 'over_60_hospitalized', 'under_5_death', 'over_60_death')
glimpse(peru)
# Estimation when PCV7, PCV10 and PCV13 was introduced
pcv7.intro.date <- as.Date('2009-07-01')
pcv10.intro.date <- as.Date('2011-07-01')
pcv13.intro.date <- as.Date('2013-07-01')
df <- peru[c("year","week", "under_5_death", "over_60_death")]
#Group by year, week
df <- df %>%
group_by(year, week) %>%
summarise(
total_under_5 = sum(under_5_death, na.rm = TRUE),
total_over_60 = sum(over_60_death, na.rm = TRUE),
.groups = "drop"
)
#Format week in standard format
df <- df %>%
mutate(date = as.Date(paste0(year, '-01-01')) + weeks(week-1))
#Aggregate into monthly counts
df <- df %>%
mutate(date = floor_date(date, "month")) %>%
group_by(date) %>%
summarise(
under5 = sum(total_under_5,   na.rm = TRUE),
over60 = sum(total_over_60,   na.rm = TRUE),
.groups = "drop"
)
#| fig.width: 15
#| fig.height: 9
#Legend for vaccine implementation dates
vaccine_dates <- tibble(
date    = c(pcv7.intro.date, pcv10.intro.date, pcv13.intro.date),
vaccine = c("PCV7", "PCV10", "PCV13"),
levels = c("PCV7", "PCV10", "PCV13"))
p1 <-
ggplot(df, aes(x = date, y = under5)) +
geom_line() +
geom_vline( data = vaccine_dates, aes(xintercept = date, colour = vaccine, linetype = vaccine), size = 0.8) +
scale_colour_brewer( name = "Vaccine introduction", palette = "Dark2") +
scale_linetype_discrete(name = "Vaccine introduction") +
labs(title = "Monthly <5 Deaths Over Time", x = "Month (first day)", y = "Total <5 Deaths") +
theme_minimal(base_size = 14) +
theme(legend.position = "bottom", legend.direction = "horizontal")
p2 <-
ggplot(df, aes(x = date, y = over60)) +
geom_line() +
geom_vline( data = vaccine_dates, aes(xintercept = date, colour = vaccine, linetype = vaccine), size = 0.8) +
scale_colour_brewer( name = "Vaccine introduction", palette = "Dark2") +
scale_linetype_discrete(name = "Vaccine introduction") +
labs(title = "Monthly >60 Deaths Over Time", x = "Month (first day)", y = "Total >60 Deaths") +
theme_minimal(base_size = 14) +
theme(legend.position = "bottom", legend.direction = "horizontal")
# Display the plots side-by-side.
grid.arrange(p1, p2, nrow = 2)
#| fig.width: 6
#| fig.height: 4
p1 <-
ggplot(df, aes(x = date, y = under5)) +
geom_point() +
labs(title = "<5 yo Deaths Scatter Plot",
x = "Date", y = "Counts") +
# Have y-axis for the two plots be the same.
ylim(0, NA) +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
p1
#| fig.width: 6
#| fig.height: 4
p1 <-
ggplot(df, aes(x = date, y = under5)) +
geom_point() +
labs(title = "<5 yo Deaths Scatter Plot",
x = "Date", y = "Counts") +
# Have y-axis for the two plots be the same.
ylim(0, NA) +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
png(
filename = "under_5_monthly_deaths.png",
width    = 15,      # width in inches
height   = 9,       # height in inches
units    = "in",    # you can also use "cm" or "px"
res      = 300      # resolution in dpi
)
p1
dev.off()
#| fig.width: 6
#| fig.height: 4
p1 <-
ggplot(df, aes(x = date, y = under5)) +
geom_point() +
labs(title = "<5 yo Deaths Scatter Plot",
x = "Date", y = "Counts") +
# Have y-axis for the two plots be the same.
ylim(0, NA) +
theme_linedraw() +
# Specify aspects of the theme plot formatting settings.
theme(panel.spacing = unit(2, 'lines'),
axis.text.x = element_text(angle = 90))
png(
filename = "under_5_monthly_deaths.png",
width    = 15,      # width in inches
height   = 9,       # height in inches
units    = "in",    # you can also use "cm" or "px"
res      = 300      # resolution in dpi
)
grid.arrange(p1)
dev.off()
